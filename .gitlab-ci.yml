variables:
  IMAGE_TAG: $CI_COMMIT_SHA
  BRANCH: $CI_COMMIT_REF_NAME
stages:
  - sonar_report
  - deploy_admin
  - deploy_web
sonarqube_check:
  stage: sonar_report
  when: manual
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner -Dsonar.projectKey=Hospitality_Bot -Dsonar.sources=. -Dsonar.host.url=http://138.197.70.44:9000 -Dsonar.login=88f0490eaf5091f843ddab8263e77a74b3d85d1b
  allow_failure: false
  tags:
    - k8s


Deploy_Admin:
  stage: deploy_admin
  environment:
    name: k8s
  when: on_success
  before_script:
    - echo $(git rev-parse HEAD) | cut -c 1-7
    - ls -l
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY_URL
  script:
    - docker build -t $CI_IMAGE_NAME .
    - docker tag $CI_IMAGE_NAME $CI_REGISTRY_IMAGE_URL:$IMAGE_TAG 
    - docker push $CI_REGISTRY_IMAGE_URL:$IMAGE_TAG
    - cat "$DEPLOYMENT_FILE" > deployment.yaml
    - cat "$KUBE_CONFIG_FILE" > k8s-config.yaml
    - export KUBECONFIG=k8s-config.yaml
    - sed -i "s/latest/${IMAGE_TAG}/g" deployment.yaml
    - kubectl apply -f deployment.yaml --validate=false
  tags:
    - k8s

Deploy_Web:
  stage: deploy_web
  environment:
    name: k8s_web
  when: on_success
  before_script:
    - echo $(git rev-parse HEAD) | cut -c 1-7
    - ls -l
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY_URL
    - sed -i "s/admin/web-user/g" Dockerfile
    - sed -i "s/admin/web/g" deploy/nginx.conf
  script:
    - docker build -t $CI_IMAGE_NAME .
    - docker tag $CI_IMAGE_NAME $CI_REGISTRY_IMAGE_URL:$IMAGE_TAG 
    - docker push $CI_REGISTRY_IMAGE_URL:$IMAGE_TAG
    - cat "$DEPLOYMENT_FILE" > deployment.yaml
    - cat "$KUBE_CONFIG_FILE" > k8s-config.yaml
    - export KUBECONFIG=k8s-config.yaml
    - sed -i "s/latest/${IMAGE_TAG}/g" deployment.yaml
    - kubectl apply -f deployment.yaml --validate=false
  tags:
    - k8s

#test_project:
#    stage: test
#    script:
#        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY_URL
#        - docker pull $CI_REGISTRY_IMAGE_URL:$IMAGE_TAG
#        - docker run --name=$BRANCH -p 3002:3002 -i $CI_REGISTRY_IMAGE_URL:$IMAGE_TAG npm run ci
#    tags:
#     - k8s

#deploy_project:
#  stage: deploy
#  environment:
#    name: k8s
#  when: manual
#  before_script:
#    - cat "$DEPLOYMENT_FILE" > deployment.yaml
#    - cat "$KUBE_CONFIG_FILE" > k8s-config.yaml
#  script:
#    - export KUBECONFIG=k8s-config.yaml
#    - sed -i "s/latest/${IMAGE_TAG}/g" deployment.yaml
#    - kubectl apply -f deployment.yaml --validate=false
#  tags:
#    - k8s
#stages:
#  - deploy


#deploy to ndevelopment-web-user:
#  stage: deploy
#  environment:
#    name: ndevelopment-web-user
#  when: manual
#  before_script:
#  - cp deploy/* .
#  - chmod +x *.sh
#  - rm -rf deploy
#  - tar -cvf admin.tar *
#  - ls -l
#  - ls | wc -l
#  script:
#    - ssh -p "$ssh_port" "$ssh_user"@"$server_ip" "cd $web_user_work_dir; pwd; ls;"
#    - scp -r -P$ssh_port *.tar "$ssh_user"@"$server_ip":"$web_user_work_dir"
#    - ssh -p "$ssh_port" "$ssh_user"@"$server_ip" "cd $web_user_work_dir; free -h; tar -xvf *.tar; sh -x web-user_dev.sh"
#    - ssh -p "$ssh_port" "$ssh_user"@"$server_ip" "sleep 40; rm -rf $web_user_work_dir/*.sh; rm -rf $web_user_work_dir/*.tar; ls $web_user_work_dir && netstat -tnlp"
#  only:
#    - dev-deploy




#deploy to ndevelopment-admin:
#  stage: deploy
#  environment:
#    name: ndevelopment-admin
#  when: manual
#  before_script:
#  - cp deploy/* .
#  - chmod +x *.sh
#  - rm -rf deploy
#  - tar -cvf admin.tar *
#  - ls -l
#  - ls | wc -l
#  script:
#    - ssh -p "$ssh_port" "$ssh_user"@"$server_ip" "cd $admin_work_dir; pwd; ls"
#    - scp -r -P$ssh_port *.tar "$ssh_user"@"$server_ip":"$admin_work_dir"
#    #- scp -r -P$ssh_port * "$ssh_user"@"$server_ip":"$admin_work_dir"
#    #- scp -r -P$ssh_port admin.sh "$ssh_user"@"$server_ip":"$admin_work_dir"
#    - ssh -p "$ssh_port" "$ssh_user"@"$server_ip" "cd $admin_work_dir; free -h; tar -xvf *.tar; sh -x admin.sh"
#    - ssh -p "$ssh_port" "$ssh_user"@"$server_ip" "sleep 40; rm -rf $admin_work_dir/*.sh; rm -rf $admin_work_dir/*.tar; ls $admin_work_dir && netstat -tnlp"
#  only:
#    - dev-deploy
